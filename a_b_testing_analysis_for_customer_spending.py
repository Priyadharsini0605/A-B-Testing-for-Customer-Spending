# -*- coding: utf-8 -*-
"""A/B Testing Analysis for Customer Spending.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A_Enr2JXTdcffBEwF2Aytze7rCwKbBZK

## 1. Data Loading with kagglehub
"""

import kagglehub
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Download the dataset dynamically from Kaggle
path = kagglehub.dataset_download("arjunbhasin2013/ccdata")
print("Path to dataset files:", path)

# Define the path to the file
file_path = f"{path}/CC GENERAL.csv"

# Load the dataset
data = pd.read_csv(file_path)
print(data.head())

"""## 2. Exploratory Data Analysis (EDA)"""

# Basic information about the dataset
print(data.info())
print(data.describe())

# Fill missing values for numeric columns only
numeric_cols = data.select_dtypes(include=['float64', 'int64']).columns
data[numeric_cols] = data[numeric_cols].fillna(data[numeric_cols].median())

# Verify missing values after filling
print("Missing Values After Filling:\n", data.isnull().sum())

"""## 3. A/B Testing Setup
Simulate an A/B test by splitting the dataset into two groups:

Group A: Customers without cashback offers.
Group B: Customers with cashback offers.
"""

import numpy as np

# Randomly assign groups
np.random.seed(42)
data['Group'] = np.random.choice(['A', 'B'], size=len(data))

# Simulate cashback impact
data['Cashback Offer'] = np.where(data['Group'] == 'B', 0.1 * data['PURCHASES'], 0)

# Compute new total spending
data['Total Spending'] = data['PURCHASES'] + data['Cashback Offer']

"""## 4. Visualizations

Group Comparison for Spending Behavior
"""

plt.figure(figsize=(10, 6))
sns.boxplot(x='Group', y='Total Spending', data=data, palette='Set2')
plt.title('Spending Behavior Across Groups (A vs B)')
plt.ylabel('Total Spending')
plt.xlabel('Group')
plt.show()

# Check the unique values in the 'Group' column
print(data['Group'].unique())

# Ensure 'Group' is a categorical column
data['Group'] = data['Group'].astype('category')

"""Distribution of Spending"""

plt.figure(figsize=(10, 6))
sns.histplot(data=data, x='Total Spending', bins=30, kde=True, hue='Group', palette='Set2')
plt.title('Distribution of Spending Across Groups')
plt.xlabel('Total Spending')
plt.ylabel('Frequency')
plt.legend(title='Group')
plt.show()

"""##5. Statistical Analysis

**Hypothesis Testing**

Null Hypothesis (H0): No difference in spending between groups A and B.

Alternative Hypothesis (H1): There is a significant difference in spending.
"""

from scipy.stats import ttest_ind

# Perform a t-test
group_a = data[data['Group'] == 'A']['Total Spending']
group_b = data[data['Group'] == 'B']['Total Spending']

t_stat, p_value = ttest_ind(group_a, group_b)
print(f"T-statistic: {t_stat}, P-value: {p_value}")

if p_value < 0.05:
    print("Reject the null hypothesis: Significant difference in spending.")
else:
    print("Fail to reject the null hypothesis: No significant difference in spending.")

"""## Further Analysis:

Segment the groups by additional variables, such as customer demographics or tenure.
Perform a post-hoc analysis to identify subgroups driving the difference in spending.
"""

# Segment the data by 'TENURE' (e.g., short vs. long tenure)
data['TENURE_GROUP'] = pd.cut(data['TENURE'], bins=[0, 6, 12], labels=['Short', 'Long'])

# Calculate average spending for each segment
spending_by_tenure = data.groupby(['Group', 'TENURE_GROUP'])['Total Spending'].mean().reset_index()

# Visualize
sns.barplot(data=spending_by_tenure, x='TENURE_GROUP', y='Total Spending', hue='Group', palette='Set2')
plt.title('Average Spending by Tenure and Group')
plt.xlabel('Tenure Group')
plt.ylabel('Average Spending')
plt.show()

# Check unique values in 'Group' and 'TENURE_GROUP' columns
print(data['Group'].unique())
print(data['TENURE_GROUP'].unique())

# Combine 'Group' and 'TENURE_GROUP' into a new column 'Group_Tenure'
data['Group_Tenure'] = data['Group'].astype(str) + '_' + data['TENURE_GROUP'].astype(str)

# Verify the new column
print(data['Group_Tenure'].unique())

# Perform Tukey's HSD test
from statsmodels.stats.multicomp import pairwise_tukeyhsd

# Perform Tukey's HSD
tukey = pairwise_tukeyhsd(data['Total Spending'], data['Group_Tenure'], alpha=0.05)
print(tukey)

# Visualize Tukey's HSD results
tukey.plot_simultaneous()
plt.title('Post-Hoc Analysis of Spending')
plt.show()

# Segment by purchase frequency
data['FREQUENCY_GROUP'] = pd.cut(data['PURCHASES_FREQUENCY'], bins=[0, 0.5, 1], labels=['Low Frequency', 'High Frequency'])

# Analyze spending by frequency and group
spending_by_frequency = data.groupby(['Group', 'FREQUENCY_GROUP'])['Total Spending'].mean().reset_index()

# Visualize
sns.barplot(data=spending_by_frequency, x='FREQUENCY_GROUP', y='Total Spending', hue='Group', palette='Set3')
plt.title('Spending by Purchase Frequency and Group')
plt.xlabel('Purchase Frequency Group')
plt.ylabel('Average Spending')
plt.show()